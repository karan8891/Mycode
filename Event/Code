def parse_apmf_event(**kwargs):
    ti = kwargs["ti"]
    raw = ti.xcom_pull(task_ids="wait_for_apmf_message")

    try:
        parsed = raw[0]  # ✅ First element from the pulled list
        message_data_b64 = parsed["message"]["data"]  # ✅ base64-encoded string
        message_data = json.loads(base64.b64decode(message_data_b64).decode("utf-8"))  # ✅ Decode and parse
        file_events = message_data["file_events"]
    except Exception as e:
        raise ValueError(f"[ERROR] Failed to parse message: {raw}, error: {e}")

    # Group events by deletion flag
    grouped = {
        True: [],
        False: []
    }

    for event in file_events:
        flag = event.get("delete_source_files_after_transfer", False)
        grouped[flag].append(event)

    ti.xcom_push(key="grouped_events", value=grouped)
