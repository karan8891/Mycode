import base64
import json
import os
from google.cloud import storage, pubsub_v1

# ENV VARS
DEST_PROJECT = os.getenv("DEST_PROJECT", "sandbox-corp-gdw-cdmp-xxxx")
DEST_BUCKET = os.getenv("DEST_BUCKET", "cdmp-destination-bucket")
DEST_TOPIC = os.getenv("DEST_TOPIC", "projects/sandbox-corp-gdw-cdmp-xxxx/topics/gdw-sts-trigger-topic")

def main(event, context):
    try:
        # Parse incoming message (from metadata.json or Pub/Sub)
        message = base64.b64decode(event['data']).decode("utf-8")
        payload = json.loads(message)

        src_bucket = payload.get("cdm_source_bucket")
        src_objects = payload.get("cdm_source_objects", [])
        prefix = payload.get("cdm_file_prefix_pattern", "")
        src_project = payload.get("cdm_source_project_id", "sandbox-corp-apmf-oaep-03fd")
        delete_flag = payload.get("delete_source_files_after_transfer", False)

        if not src_bucket or not src_objects:
            print("Missing required fields: 'cdm_source_bucket' or 'cdm_source_objects'")
            return

        # Check if toc.json exists, else generate one
        toc_blob_path = None
        for obj in src_objects:
            if obj.endswith("toc.json"):
                toc_blob_path = obj
                break

        storage_client = storage.Client()
        toc_data = {
            "source_bucket": src_bucket,
            "source_objects": src_objects,
            "delete_after_transfer": delete_flag
        }

        if not toc_blob_path:
            # Generate a toc.json file in destination
            generated_toc_name = f"toc/{os.path.basename(src_objects[0])}.toc.json"
            destination_bucket = storage_client.bucket(DEST_BUCKET)
            destination_blob = destination_bucket.blob(generated_toc_name)
            destination_blob.upload_from_string(json.dumps(toc_data), content_type="application/json")
            toc_blob_path = generated_toc_name
            print(f"Generated TOC and uploaded to: {generated_toc_name}")
        else:
            print(f"TOC file already present: {toc_blob_path}")

        # Build message for GDW Cloud Function trigger
        enriched_message = {
            "bucket": src_bucket,
            "objects": src_objects,
            "prefix": prefix,
            "project_id": src_project,
            "delete_after_transfer": delete_flag
        }

        # Publish to GDW CF Pub/Sub
        publisher = pubsub_v1.PublisherClient()
        topic_path = DEST_TOPIC
        publisher.publish(topic_path, json.dumps(enriched_message).encode("utf-8"))
        print(f"Published message to {topic_path}: {enriched_message}")

    except Exception as e:
        print(f"Error: {e}")
