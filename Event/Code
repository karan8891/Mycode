import base64
import json
import os
from google.cloud import storage, pubsub_v1

# ENV VARS
DEST_PROJECT = os.getenv("DEST_PROJECT", "sandbox-corp-gdw-cdmp-xxxx")
DEST_BUCKET = os.getenv("DEST_BUCKET", "cdmp-destination-bucket")
DEST_TOPIC = os.getenv("DEST_TOPIC", "projects/sandbox-corp-gdw-cdmp-xxxx/topics/gdw-sts-trigger-topic")

def main(event, context):
    try:
        # Parse metadata file GCS trigger info
        bucket_name = event['bucket']
        metadata_file = event['name']  # e.g., metadata/abc.json
        if not metadata_file.endswith(".json"):
            print("Not a JSON metadata file. Ignored.")
            return

        # Read and parse metadata file
        storage_client = storage.Client()
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(metadata_file)
        metadata = json.loads(blob.download_as_text())

        object_path = metadata.get("file")
        delete_flag = metadata.get("delete_after_transfer", False)

        if not object_path:
            print("Missing 'file' field in metadata.")
            return

        # Build enriched message to trigger GDW CF
        enriched_message = {
            "bucket": bucket_name,
            "object": object_path,
            "project_id": os.getenv("SOURCE_PROJECT", "sandbox-corp-apmf-oaep-03fd"),
            "delete_after_transfer": delete_flag
        }

        # Publish to GDW Pub/Sub topic
        publisher = pubsub_v1.PublisherClient()
        topic_path = DEST_TOPIC
        publisher.publish(topic_path, json.dumps(enriched_message).encode("utf-8"))
        print(f"Published message to {topic_path}: {enriched_message}")

        # Optional: Write TOC file to DEST_BUCKET (same name with .toc.json)
        toc_blob_name = f"toc/{os.path.basename(object_path)}.toc.json"
        toc_data = {
            "source_bucket": bucket_name,
            "source_object": object_path,
            "delete_after_transfer": delete_flag
        }
        destination_bucket = storage_client.bucket(DEST_BUCKET)
        toc_blob = destination_bucket.blob(toc_blob_name)
        toc_blob.upload_from_string(json.dumps(toc_data), content_type="application/json")
        print(f"TOC file written to {DEST_BUCKET}/{toc_blob_name}")

    except Exception as e:
        print(f"Error: {e}")
