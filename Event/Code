import base64
import json
import os
import google.auth
from google.auth.transport import requests
import requests as external_requests

# Set this as an environment variable in Cloud Function deployment
DAG_TRIGGER_URL = os.getenv("DAG_TRIGGER_URL")  # e.g., https://composer-url/api/experimental/dags/event_sts_transfer_dag/dag_runs

def main(event, context):
    try:
        if 'data' not in event:
            raise ValueError("No data in Pub/Sub message")

        # Decode the Pub/Sub message
        message_data = base64.b64decode(event['data']).decode("utf-8")
        payload = json.loads(message_data)

        # Log received payload
        print("Received payload:", payload)

        # Extract required fields
        dag_conf = {
            "bucket": payload.get("cdm_source_bucket"),
            "object": payload.get("cdm_source_objects"),
            "project_id": payload.get("cdm_source_project_id"),
            "prefix": payload.get("cdm_file_prefix_pattern", ""),
            "delete_after_transfer": payload.get("delete_source_files_after_transfer", False),
            "toc_file_name": payload.get("toc_file_name")
        }

        # Check for missing critical fields
        if not dag_conf["bucket"] or not dag_conf["object"] or not dag_conf["project_id"]:
            raise ValueError("Missing required fields in message")

        # Get ID token for Composer
        credentials, _ = google.auth.default()
        auth_req = requests.Request()
        credentials.refresh(auth_req)
        id_token = credentials.token

        headers = {
            "Authorization": f"Bearer {id_token}",
            "Content-Type": "application/json"
        }

        # Trigger Airflow DAG
        response = external_requests.post(
            DAG_TRIGGER_URL,
            headers=headers,
            json={"conf": dag_conf}
        )

        if response.status_code not in [200, 201]:
            raise RuntimeError(f"Failed to trigger DAG: {response.status_code} - {response.text}")
        else:
            print("DAG triggered successfully.")

    except Exception as e:
        print(f"Error: {str(e)}")
        raise
