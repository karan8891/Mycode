from airflow import models from airflow.operators.python import PythonOperator from airflow.utils.dates import days_ago from airflow.providers.google.cloud.operators import pubsub_v1 from airflow.providers.google.cloud.operators.cloud_storage_transfer_service import ( CloudDataTransferServiceCreateJobOperator, CloudDataTransferServiceUpdateJobOperator, CloudDataTransferServiceDeleteJobOperator, ) from airflow.providers.google.cloud.sensors.pubsub import PubSubPullSensor import json import uuid

DAG config: Triggered by APMF message via CF and handled in Composer

def parse_apmf_event(**kwargs): messages = kwargs["ti"].xcom_pull(task_ids="wait_for_apmf_message") message_data = json.loads(messages[0]["message"]["data"]) kwargs["ti"].xcom_push(key="apmf_message", value=message_data)

def create_sts_job_payload(conf): job_id = str(uuid.uuid4())[:8] job_name = "transferJobs/" + str(uuid.uuid4())[:8] return { "description": f"{conf.get('cdm_source_bucket')} to gdw-sfr-cdb8 delete: {conf.get('delete_source_files_after_transfer', False)}", "name": job_name, "project_id": "sandbox-corp-gdw-sfr-cdb8", "transfer_spec": { "gcs_data_source": {"bucket_name": conf.get("cdm_source_bucket")}, "gcs_data_sink": {"bucket_name": "gdw2_sandbox-corp-gdw-sfr-cdb8"}, "object_conditions": {"include_prefixes": conf.get("cdm_file_prefix_pattern", "").split(",") if conf.get("cdm_file_prefix_pattern") else []}, "transfer_options": { "delete_objects_from_source_after_transfer": conf.get("delete_source_files_after_transfer", False) }, }, "notification_config": { "pubsub_topic": "projects/sandbox-corp-gdw-sfr-cdb8/topics/sts-completion-topic", "event_types": ["TRANSFER_OPERATION_SUCCESS"], "payload_format": "JSON" } }

def build_transfer_body(**kwargs): conf = kwargs["ti"].xcom_pull(task_ids="parse_apmf_event", key="apmf_message") body = create_sts_job_payload(conf) kwargs["ti"].xcom_push(key="sts_body", value=body)

with models.DAG( dag_id="event_sts_transfer_dag", start_date=days_ago(1), schedule_interval=None, catchup=False, params={"job_id": None}, default_args={"retries": 0}, tags=["sts", "five9", "event-driven", "apmf-gdw"], ) as dag:

wait_for_apmf_message = PubSubPullSensor(
    task_id="wait_for_apmf_message",
    project_id="cdmp-project-id",
    subscription="projects/sandbox-corp-gdw-sfr-cdb8/subscriptions/cf-trigger-dag",
    ack_messages=True,
    max_messages=1,
    timeout=300,
)

parse_message = PythonOperator(
    task_id="parse_apmf_event",
    python_callable=parse_apmf_event,
    provide_context=True,
)

generate_sts_body = PythonOperator(
    task_id="generate_sts_body",
    python_callable=build_transfer_body,
    provide_context=True,
)

create_sts_job = CloudDataTransferServiceCreateJobOperator(
    task_id="create_sts_job",
    body="{{ task_instance.xcom_pull(task_ids='generate_sts_body', key='sts_body') }}",
    do_xcom_push=True,
)

run_sts_job = CloudDataTransferServiceUpdateJobOperator(
    task_id="run_sts_job",
    job_name="{{ task_instance.xcom_pull(task_ids='create_sts_job')['name'] }}",
    project_id="cdmp-project-id",
    update_body={"status": "ENABLED"},
    update_mask="status",
)

wait_for_completion = PubSubPullSensor(
    task_id="wait_for_sts_completion",
    project_id="cdmp-project-id",
    subscription="projects/sandbox-corp-gdw-sfr-cdb8/subscriptions/sts-completion-sub",
    ack_messages=True,
    max_messages=5,
    timeout=600,
)

def delete_job_and_notify(**kwargs):
    job_id = kwargs["ti"].xcom_pull(task_ids="create_sts_job")["description"]
    conf = kwargs["ti"].xcom_pull(task_ids="parse_apmf_event", key="apmf_message")
    toc_file_name = conf.get("toc_file_name")

    message = {
        "toc_file": toc_file_name,
        "source_bucket": conf.get("cdm_source_bucket"),
        "source_project": conf.get("cdm_source_project_id"),
        "delete_after_transfer": conf.get("delete_source_files_after_transfer", False),
    }

    publisher = pubsub_v1.PublisherClient()
    topic_path = publisher.topic_path("cdmp-project-id", "cdmnxt-trigger-topic")
    publisher.publish(topic_path, json.dumps(message).encode("utf-8")).result()

    return job_id

cleanup = PythonOperator(
    task_id="delete_job_notify",
    python_callable=delete_job_and_notify,
    provide_context=True,
)

delete_job = CloudDataTransferServiceDeleteJobOperator(
    task_id="delete_sts_job",
    job_name="{{ task_instance.xcom_pull(task_ids='create_sts_job')['name'] }}",
    project_id="cdmp-project-id",
)

# DAG Flow
wait_for_apmf_message >> parse_message >> generate_sts_body >> create_sts_job >> run_sts_job >> wait_for_completion >> cleanup >> delete_job

